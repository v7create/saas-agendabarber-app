rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isValidPhone(phone) {
      return phone.matches('^\\([0-9]{2}\\) [0-9]{4,5}-[0-9]{4}$');
    }

    function isValidDate(date) {
      return date.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
    }

    function isValidTime(time) {
      return time.matches('^[0-9]{2}:[0-9]{2}$');
    }

    function isValidAppointmentStatus(status) {
      return status == 'Pendente' || status == 'Confirmado' || status == 'Em Atendimento' ||
             status == 'Concluido' || status == 'Concluído' || status == 'Cancelado' ||
             status == 'Nao Compareceu' || status == 'Não Compareceu';
    }

    function isValidPaymentMethod(method) {
      return method == 'Dinheiro' || method == 'Cartão de Crédito' || 
             method == 'Cartão de Débito' || method == 'Pix' || method == 'Transferencia';
    }

    match /{document=**} {
      allow read, write: if false;
    }

    match /barbershops/{userId} {
      allow read: if isOwner(userId);
      
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['name', 'phone', 'address', 'createdAt']) &&
        request.resource.data.name.size() >= 3 &&
        request.resource.data.name.size() <= 100 &&
        isValidPhone(request.resource.data.phone) &&
        request.resource.data.address.size() >= 5;
      
      allow update: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['name', 'phone', 'address', 'createdAt']) &&
        request.resource.data.name.size() >= 3 &&
        request.resource.data.name.size() <= 100 &&
        isValidPhone(request.resource.data.phone) &&
        request.resource.data.address.size() >= 5;
      
      allow delete: if isOwner(userId);

      match /appointments/{appointmentId} {
        allow read: if isOwner(userId);
        
        allow create: if isOwner(userId) &&
          request.resource.data.keys().hasAll(['clientName', 'clientPhone', 'date', 'startTime', 'status', 'createdAt']) &&
          request.resource.data.clientName.size() >= 3 &&
          request.resource.data.clientName.size() <= 100 &&
          isValidPhone(request.resource.data.clientPhone) &&
          isValidDate(request.resource.data.date) &&
          isValidTime(request.resource.data.startTime) &&
          isValidAppointmentStatus(request.resource.data.status);
        
        allow update: if isOwner(userId) &&
          request.resource.data.keys().hasAll(['clientName', 'clientPhone', 'date', 'startTime', 'status', 'createdAt']) &&
          request.resource.data.clientName.size() >= 3 &&
          request.resource.data.clientName.size() <= 100 &&
          isValidPhone(request.resource.data.clientPhone) &&
          isValidDate(request.resource.data.date) &&
          isValidTime(request.resource.data.startTime) &&
          isValidAppointmentStatus(request.resource.data.status);
        
        allow delete: if isOwner(userId);
      }

      match /clients/{clientId} {
        allow read: if isOwner(userId);
        
        allow create: if isOwner(userId) &&
          request.resource.data.keys().hasAll(['name', 'phone', 'createdAt']) &&
          request.resource.data.name.size() >= 3 &&
          request.resource.data.name.size() <= 100 &&
          isValidPhone(request.resource.data.phone);
        
        allow update: if isOwner(userId) &&
          request.resource.data.keys().hasAll(['name', 'phone', 'createdAt']) &&
          request.resource.data.name.size() >= 3 &&
          request.resource.data.name.size() <= 100 &&
          isValidPhone(request.resource.data.phone);
        
        allow delete: if isOwner(userId);
      }

      match /services/{serviceId} {
        allow read: if true;
        
        allow create: if isOwner(userId) &&
          request.resource.data.keys().hasAll(['name', 'price', 'duration', 'createdAt']) &&
          request.resource.data.name.size() >= 3 &&
          request.resource.data.name.size() <= 100 &&
          request.resource.data.price >= 0 &&
          request.resource.data.duration > 0 &&
          request.resource.data.duration <= 480;
        
        allow update: if isOwner(userId) &&
          request.resource.data.keys().hasAll(['name', 'price', 'duration', 'createdAt']) &&
          request.resource.data.name.size() >= 3 &&
          request.resource.data.name.size() <= 100 &&
          request.resource.data.price >= 0 &&
          request.resource.data.duration > 0 &&
          request.resource.data.duration <= 480;
        
        allow delete: if isOwner(userId);
      }

      match /transactions/{transactionId} {
        allow read: if isOwner(userId);
        
        allow create: if isOwner(userId) &&
          request.resource.data.keys().hasAll(['type', 'category', 'amount', 'date', 'description', 'paymentMethod', 'createdAt']) &&
          (request.resource.data.type == 'income' || request.resource.data.type == 'expense') &&
          request.resource.data.category.size() >= 3 &&
          request.resource.data.amount > 0 &&
          isValidDate(request.resource.data.date) &&
          request.resource.data.description.size() <= 500 &&
          isValidPaymentMethod(request.resource.data.paymentMethod);
        
        allow update: if isOwner(userId) &&
          request.resource.data.keys().hasAll(['type', 'category', 'amount', 'date', 'description', 'paymentMethod', 'createdAt']) &&
          (request.resource.data.type == 'income' || request.resource.data.type == 'expense') &&
          request.resource.data.category.size() >= 3 &&
          request.resource.data.amount > 0 &&
          isValidDate(request.resource.data.date) &&
          request.resource.data.description.size() <= 500 &&
          isValidPaymentMethod(request.resource.data.paymentMethod);
        
        allow delete: if isOwner(userId);
      }

      match /settings/{settingId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }

    match /publicProfiles/{userId} {
      allow read: if true;
      
      allow write: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['barbershopName', 'isActive']) &&
        request.resource.data.barbershopName.size() >= 3;
    }

    match /metadata/{userId}/stats/{statId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
  }
}